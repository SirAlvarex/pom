// Code generated DO NOT EDIT
// This file was generated by robots at
// 2019-08-22 20:08:40.8977724 -0700 PDT m=+0.662229701
package pom

import (
	"encoding/xml"
	"io"
)

type XMLAnyElement struct {
	Comment  xml.Comment          `xml:",comment"`
	Elements []XMLAnyElementEntry `xml:",any"`
}

type XMLAnyElementEntry struct {
	XMLName xml.Name
	Value   string      `xml:",chardata"`
	Comment xml.Comment `xml:",comment"`
}

// XMLMap is a custom key used to let XML data parse maps
// Because it doesnt do that by default...for some reason.
type XMLMap map[string]string

type xmlMapEntry struct {
	XMLName xml.Name
	Value   string `xml:",chardata"`
}

// MarshalXMLEntry marshals the map to XML, with each key in the map being a
// tag and it's corresponding value being it's contents.
func (m XMLAnyElement) MarshalXML(e *xml.Encoder, start xml.StartElement) error {

	err := e.EncodeToken(start)
	if err != nil {
		return err
	}
	e.EncodeToken(m.Comment)
	e.Flush()
	for _, elem := range m.Elements {
		e.Encode(XMLAnyElementEntry{XMLName: xml.Name{Local: elem.XMLName.Local, Space: ""}, Value: elem.Value})
	}

	return e.EncodeToken(start.End())
}

// MarshalXML marshals the map to XML, with each key in the map being a
// tag and it's corresponding value being it's contents.
func (m XMLMap) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if len(m) == 0 {
		return nil
	}

	err := e.EncodeToken(start)
	if err != nil {
		return err
	}

	for k, v := range m {
		e.Encode(xmlMapEntry{XMLName: xml.Name{Local: k}, Value: v})
	}

	return e.EncodeToken(start.End())
}

// UnmarshalXML takes a key and turns it into a map
func (m *XMLMap) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	*m = XMLMap{}
	for {
		var e xmlMapEntry

		err := d.Decode(&e)
		if err == io.EOF {
			break
		} else if err != nil {
			return err
		}

		(*m)[e.XMLName.Local] = e.Value
	}
	return nil
}

// project The <code>&lt;project&gt;</code> element is the root of the descriptor.
//        The following table lists all of the possible child elements.
type project struct {
	XMLName        xml.Name
	Xmlns          string `xml:"xmlns,attr"`
	Xsi            string `xml:"xsi,attr"`
	SchemaLocation string `xml:"schemaLocation,attr"`

	/* ModelVersion Declares to which version of project descriptor this POM conforms.*/
	ModelVersion *string `xml:"modelVersion,omitempty"`

	/* Parent The location of the parent project, if one exists. Values from the parent
	   project will be the default for this project if they are left unspecified. The location
	   is given as a group ID, artifact ID and version.*/
	Parent *Parent `xml:"parent,omitempty"`

	/* GroupId A universally unique identifier for a project. It is normal to
	   use a fully-qualified package name to distinguish it from other
	   projects with a similar name (eg. <code>org.apache.maven</code>).*/
	GroupID *string `xml:"groupId,omitempty"`

	/* ArtifactId The identifier for this artifact that is unique within the group given by the
	   group ID. An artifact is something that is either produced or used by a project.
	   Examples of artifacts produced by Maven for a project include: JARs, source and binary
	   distributions, and WARs.*/
	ArtifactID *string `xml:"artifactId,omitempty"`

	/* Version The current version of the artifact produced by this project.*/
	Version *string `xml:"version,omitempty"`

	/* Packaging The type of artifact this project produces, for example <code>jar</code>
	     <code>war</code>
	     <code>ear</code>
	     <code>pom</code>.
	   Plugins can create their own packaging, and
	   therefore their own packaging types,
	   so this list does not contain all possible types.*/
	Packaging *string `xml:"packaging,omitempty"`

	/* Name The full name of the project.*/
	Name *string `xml:"name,omitempty"`

	/* Description A detailed description of the project, used by Maven whenever it needs to
	   describe the project, such as on the web site. While this element can be specified as
	   CDATA to enable the use of HTML tags within the description, it is discouraged to allow
	   plain text representation. If you need to modify the index page of the generated web
	   site, you are able to specify your own instead of adjusting this text.*/
	Description *string `xml:"description,omitempty"`

	/* Url The URL to the project's homepage.
	   <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
	   project's <code>child.project.url.inherit.append.path="false"</code>*/
	URL *string `xml:"url,omitempty"`

	/* InceptionYear The year of the project's inception, specified with 4 digits. This value is
	   used when generating copyright notices as well as being informational.*/
	InceptionYear *string `xml:"inceptionYear,omitempty"`

	/* Organization This element describes various attributes of the organization to which the
	   project belongs. These attributes are utilized when documentation is created (for
	   copyright notices and links).*/
	Organization *Organization `xml:"organization,omitempty"`

	/* Licenses This element describes all of the licenses for this project.
	   Each license is described by a <code>license</code> element, which
	   is then described by additional elements.
	   Projects should only list the license(s) that applies to the project
	   and not the licenses that apply to dependencies.
	   If multiple licenses are listed, it is assumed that the user can select
	   any of them, not that they must accept all.*/
	Licenses *struct {
		Comment string     `xml:",comment"`
		License *[]License `xml:"license,omitempty"`
	} `xml:"licenses,omitempty"`

	/* Developers Describes the committers of a project.*/
	Developers *struct {
		Comment   string       `xml:",comment"`
		Developer *[]Developer `xml:"developer,omitempty"`
	} `xml:"developers,omitempty"`

	/* Contributors Describes the contributors to a project that are not yet committers.*/
	Contributors *struct {
		Comment     string         `xml:",comment"`
		Contributor *[]Contributor `xml:"contributor,omitempty"`
	} `xml:"contributors,omitempty"`

	/* MailingLists Contains information about a project's mailing lists.*/
	MailingLists *struct {
		Comment     string         `xml:",comment"`
		MailingList *[]MailingList `xml:"mailingList,omitempty"`
	} `xml:"mailingLists,omitempty"`

	/* Prerequisites Describes the prerequisites in the build environment for this project.*/
	Prerequisites *Prerequisites `xml:"prerequisites,omitempty"`

	/* Modules The modules (sometimes called subprojects) to build as a part of this
	   project. Each module listed is a relative path to the directory containing the module.
	   To be consistent with the way default urls are calculated from parent, it is recommended
	   to have module names match artifact ids.*/
	Modules *struct {
		Comment string    `xml:",comment"`
		Module  *[]string `xml:"module,omitempty"`
	} `xml:"modules,omitempty"`

	/* Scm Specification for the SCM used by the project, such as CVS, Subversion, etc.*/
	Scm *Scm `xml:"scm,omitempty"`

	/* IssueManagement The project's issue management system information.*/
	IssueManagement *IssueManagement `xml:"issueManagement,omitempty"`

	/* CiManagement The project's continuous integration information.*/
	CiManagement *CiManagement `xml:"ciManagement,omitempty"`

	/* DistributionManagement Distribution information for a project that enables deployment of the site
	   and artifacts to remote web servers and repositories respectively.*/
	DistributionManagement *DistributionManagement `xml:"distributionManagement,omitempty"`

	/* Properties Properties that can be used throughout the POM as a substitution, and
	   are used as filters in resources if enabled.
	   The format is <code>&lt;name&gt;value&lt;/name&gt;</code>.*/
	Properties *XMLAnyElement `xml:"properties,omitempty"`

	/* DependencyManagement Default dependency information for projects that inherit from this one. The
	   dependencies in this section are not immediately resolved. Instead, when a POM derived
	   from this one declares a dependency described by a matching groupId and artifactId, the
	   version and other values from this section are used for that dependency if they were not
	   already specified.*/
	DependencyManagement *DependencyManagement `xml:"dependencyManagement,omitempty"`

	/* Dependencies This element describes all of the dependencies associated with a
	   project.
	   These dependencies are used to construct a classpath for your
	   project during the build process. They are automatically downloaded from the
	   repositories defined in this project.
	   See <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the
	   dependency mechanism</a> for more information.*/
	Dependencies *struct {
		Comment    string        `xml:",comment"`
		Dependency *[]Dependency `xml:"dependency,omitempty"`
	} `xml:"dependencies,omitempty"`

	/* Repositories The lists of the remote repositories for discovering dependencies and
	   extensions.*/
	Repositories *struct {
		Comment    string        `xml:",comment"`
		Repository *[]Repository `xml:"repository,omitempty"`
	} `xml:"repositories,omitempty"`

	/* PluginRepositories The lists of the remote repositories for discovering plugins for builds and
	   reports.*/
	PluginRepositories *struct {
		Comment    string        `xml:",comment"`
		Repository *[]Repository `xml:"repository,omitempty"`
	} `xml:"pluginRepositories,omitempty"`

	/* Build Information required to build the project.*/
	Build *Build `xml:"build,omitempty"`

	/* Reports <b>Deprecated</b>. Now ignored by Maven.*/
	Reports *XMLAnyElement `xml:"reports,omitempty"`

	/* Reporting This element includes the specification of report plugins to use
	   to generate the reports on the Maven-generated site.
	   These reports will be run when a user executes <code>mvn site</code>.
	   All of the reports will be included in the navigation bar for browsing.*/
	Reporting *Reporting `xml:"reporting,omitempty"`

	/* Profiles A listing of project-local build profiles which will modify the build process
	   when activated.*/
	Profiles *struct {
		Comment string     `xml:",comment"`
		Profile *[]Profile `xml:"profile,omitempty"`
	} `xml:"profiles,omitempty"`

	Comment string `xml:",comment"`
}

// License Describes the licenses for this project. This is used to generate the license
//        page of the project's web site, as well as being taken into consideration in other reporting
//        and validation. The licenses listed for the project are that of the project itself, and not
//        of dependencies.
type License struct {

	/* Name The full legal name of the license.*/
	Name *string `xml:"name,omitempty"`

	/* Url The official url for the license text.*/
	URL *string `xml:"url,omitempty"`

	/* Distribution The primary method by which this project may be distributed.
	   <dl>
	     <dt>repo</dt>
	     <dd>may be downloaded from the Maven repository</dd>
	     <dt>manual</dt>
	     <dd>user must manually download and install the dependency.</dd>
	   </dl>*/
	Distribution *string `xml:"distribution,omitempty"`

	/* Comments Addendum information pertaining to this license.*/
	Comments *string `xml:"comments,omitempty"`

	Comment string `xml:",comment"`
}

// CiManagement The <code>&lt;CiManagement&gt;</code> element contains informations required to the
//        continuous integration system of the project.
type CiManagement struct {

	/* System The name of the continuous integration system, e.g. <code>continuum</code>.*/
	System *string `xml:"system,omitempty"`

	/* Url URL for the continuous integration system used by the project if it has a web
	   interface.*/
	URL *string `xml:"url,omitempty"`

	/* Notifiers Configuration for notifying developers/users when a build is unsuccessful,
	   including user information and notification mode.*/
	Notifiers *struct {
		Comment  string      `xml:",comment"`
		Notifier *[]Notifier `xml:"notifier,omitempty"`
	} `xml:"notifiers,omitempty"`

	Comment string `xml:",comment"`
}

// Notifier Configures one method for notifying users/developers when a build breaks.
type Notifier struct {

	/* Type The mechanism used to deliver notifications.*/
	Type *string `xml:"type,omitempty"`

	/* SendOnError Whether to send notifications on error.*/
	SendOnError *bool `xml:"sendOnError,omitempty"`

	/* SendOnFailure Whether to send notifications on failure.*/
	SendOnFailure *bool `xml:"sendOnFailure,omitempty"`

	/* SendOnSuccess Whether to send notifications on success.*/
	SendOnSuccess *bool `xml:"sendOnSuccess,omitempty"`

	/* SendOnWarning Whether to send notifications on warning.*/
	SendOnWarning *bool `xml:"sendOnWarning,omitempty"`

	/* Address <b>Deprecated</b>. Where to send the notification to - eg email address.*/
	Address *string `xml:"address,omitempty"`

	/* Configuration Extended configuration specific to this notifier goes here.*/
	Configuration *XMLAnyElement `xml:"configuration,omitempty"`

	Comment string `xml:",comment"`
}

// Scm The <code>&lt;scm&gt;</code> element contains informations required to the SCM
//        (Source Control Management) of the project.
type Scm struct {

	/* Connection The source control management system URL
	   that describes the repository and how to connect to the
	   repository. For more information, see the
	   <a href="https://maven.apache.org/scm/scm-url-format.html">URL format</a>
	   and <a href="https://maven.apache.org/scm/scms-overview.html">list of supported SCMs</a>.
	   This connection is read-only.
	   <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
	   scm's <code>child.scm.connection.inherit.append.path="false"</code>*/
	Connection *string `xml:"connection,omitempty"`

	/* DeveloperConnection Just like <code>connection</code>, but for developers, i.e. this scm connection
	   will not be read only.
	   <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
	   scm's <code>child.scm.developerConnection.inherit.append.path="false"</code>*/
	DeveloperConnection *string `xml:"developerConnection,omitempty"`

	/* Tag The tag of current code. By default, it's set to HEAD during development.*/
	Tag *string `xml:"tag,omitempty"`

	/* Url The URL to the project's browsable SCM repository, such as ViewVC or Fisheye.
	   <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
	   scm's <code>child.scm.url.inherit.append.path="false"</code>*/
	URL *string `xml:"url,omitempty"`

	Comment string `xml:",comment"`
}

// IssueManagement Information about the issue tracking (or bug tracking) system used to manage this
//        project.
type IssueManagement struct {

	/* System The name of the issue management system, e.g. Bugzilla*/
	System *string `xml:"system,omitempty"`

	/* Url URL for the issue management system used by the project.*/
	URL *string `xml:"url,omitempty"`

	Comment string `xml:",comment"`
}

// DependencyManagement Section for management of default dependency information for use in a group of
//        POMs.
type DependencyManagement struct {

	/* Dependencies The dependencies specified here are not used until they are referenced in a
	   POM within the group. This allows the specification of a "standard" version for a
	   particular dependency.*/
	Dependencies *struct {
		Comment    string        `xml:",comment"`
		Dependency *[]Dependency `xml:"dependency,omitempty"`
	} `xml:"dependencies,omitempty"`

	Comment string `xml:",comment"`
}

// Dependency The <code>&lt;dependency&gt;</code> element contains information about a dependency
//        of the project.
type Dependency struct {

	/* GroupId The project group that produced the dependency, e.g.
	   <code>org.apache.maven</code>.*/
	GroupID *string `xml:"groupId,omitempty"`

	/* ArtifactId The unique id for an artifact produced by the project group, e.g.
	   <code>maven-artifact</code>.*/
	ArtifactID *string `xml:"artifactId,omitempty"`

	/* Version The version of the dependency, e.g. <code>3.2.1</code>. In Maven 2, this can also be
	   specified as a range of versions.*/
	Version *string `xml:"version,omitempty"`

	/* Type The type of dependency. While it
	   usually represents the extension on the filename of the dependency,
	   that is not always the case. A type can be mapped to a different
	   extension and a classifier.
	   The type often corresponds to the packaging used, though this is also
	   not always the case.
	   Some examples are <code>jar</code>, <code>war</code>, <code>ejb-client</code>
	   and <code>test-jar</code>: see <a href="../maven-core/artifact-handlers.html">default
	   artifact handlers</a> for a list.
	   New types can be defined by plugins that set
	   <code>extensions</code> to <code>true</code>, so this is not a complete list.*/
	Type *string `xml:"type,omitempty"`

	/* Classifier The classifier of the dependency. It is appended to
	   the filename after the version. This allows:
	   <ul>
	   <li>referring to attached artifact, for example <code>sources</code> and <code>javadoc</code>:
	   see <a href="../maven-core/artifact-handlers.html">default artifact handlers</a> for a list,</li>
	   <li>distinguishing two artifacts
	   that belong to the same POM but were built differently.
	   For example, <code>jdk14</code> and <code>jdk15</code>.</li>
	   </ul>*/
	Classifier *string `xml:"classifier,omitempty"`

	/* Scope The scope of the dependency - <code>compile</code>, <code>runtime</code>,
	   <code>test</code>, <code>system</code>, and <code>provided</code>. Used to
	   calculate the various classpaths used for compilation, testing, and so on.
	   It also assists in determining which artifacts to include in a distribution of
	   this project. For more information, see
	   <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the
	   dependency mechanism</a>. The default scope is <code>compile</code>.*/
	Scope *string `xml:"scope,omitempty"`

	/* SystemPath FOR SYSTEM SCOPE ONLY. Note that use of this property is <b>discouraged</b>
	   and may be replaced in later versions. This specifies the path on the filesystem
	   for this dependency.
	   Requires an absolute path for the value, not relative.
	   Use a property that gives the machine specific absolute path,
	   e.g. <code>${java.home}</code>.*/
	SystemPath *string `xml:"systemPath,omitempty"`

	/* Exclusions Lists a set of artifacts that should be excluded from this dependency's
	   artifact list when it comes to calculating transitive dependencies.*/
	Exclusions *struct {
		Comment   string       `xml:",comment"`
		Exclusion *[]Exclusion `xml:"exclusion,omitempty"`
	} `xml:"exclusions,omitempty"`

	/* Optional Indicates the dependency is optional for use of this library. While the
	   version of the dependency will be taken into account for dependency calculation if the
	   library is used elsewhere, it will not be passed on transitively. Note: While the type
	   of this field is <code>String</code> for technical reasons, the semantic type is actually
	   <code>Boolean</code>. Default value is <code>false</code>.*/
	Optional *string `xml:"optional,omitempty"`

	Comment string `xml:",comment"`
}

// Exclusion The <code>&lt;exclusion&gt;</code> element contains informations required to exclude
//        an artifact to the project.
type Exclusion struct {

	/* ArtifactId The artifact ID of the project to exclude.*/
	ArtifactID *string `xml:"artifactId,omitempty"`

	/* GroupId The group ID of the project to exclude.*/
	GroupID *string `xml:"groupId,omitempty"`

	Comment string `xml:",comment"`
}

// Parent The <code>&lt;parent&gt;</code> element contains information required to locate the parent project from which
//        this project will inherit from.
//        <strong>Note:</strong> The children of this element are not interpolated and must be given as literal values.
type Parent struct {

	/* GroupId The group id of the parent project to inherit from.*/
	GroupID *string `xml:"groupId,omitempty"`

	/* ArtifactId The artifact id of the parent project to inherit from.*/
	ArtifactID *string `xml:"artifactId,omitempty"`

	/* Version The version of the parent project to inherit.*/
	Version *string `xml:"version,omitempty"`

	/* RelativePath The relative path of the parent <code>pom.xml</code> file within the check out.
	   If not specified, it defaults to <code>../pom.xml</code>.
	   Maven looks for the parent POM first in this location on
	   the filesystem, then the local repository, and lastly in the remote repo.
	   <code>relativePath</code> allows you to select a different location,
	   for example when your structure is flat, or deeper without an intermediate parent POM.
	   However, the group ID, artifact ID and version are still required,
	   and must match the file in the location given or it will revert to the repository for the POM.
	   This feature is only for enhancing the development in a local checkout of that project.
	   Set the value to an empty string in case you want to disable the feature and always resolve
	   the parent POM from the repositories.*/
	RelativePath *string `xml:"relativePath,omitempty"`

	Comment string `xml:",comment"`
}

// Developer Information about one of the committers on this project.
type Developer struct {

	/* Id The unique ID of the developer in the SCM.*/
	ID *string `xml:"id,omitempty"`

	/* Name The full name of the contributor.*/
	Name *string `xml:"name,omitempty"`

	/* Email The email address of the contributor.*/
	Email *string `xml:"email,omitempty"`

	/* Url The URL for the homepage of the contributor.*/
	URL *string `xml:"url,omitempty"`

	/* Organization The organization to which the contributor belongs.*/
	Organization *string `xml:"organization,omitempty"`

	/* OrganizationUrl The URL of the organization.*/
	OrganizationURL *string `xml:"organizationUrl,omitempty"`

	/* Roles The roles the contributor plays in the project. Each role is described by a
	   <code>role</code> element, the body of which is a role name. This can also be used to
	   describe the contribution.*/
	Roles *struct {
		Comment string    `xml:",comment"`
		Role    *[]string `xml:"role,omitempty"`
	} `xml:"roles,omitempty"`

	/* Timezone The timezone the contributor is in. Typically, this is a number in the range
	   <a href="http://en.wikipedia.org/wiki/UTC%E2%88%9212:00">-12</a> to <a href="http://en.wikipedia.org/wiki/UTC%2B14:00">+14</a>
	   or a valid time zone id like "America/Montreal" (UTC-05:00) or "Europe/Paris" (UTC+01:00).*/
	Timezone *string `xml:"timezone,omitempty"`

	/* Properties Properties about the contributor, such as an instant messenger handle.*/
	Properties *XMLAnyElement `xml:"properties,omitempty"`

	Comment string `xml:",comment"`
}

// MailingList This element describes all of the mailing lists associated with a project. The
//        auto-generated site references this information.
type MailingList struct {

	/* Name The name of the mailing list.*/
	Name *string `xml:"name,omitempty"`

	/* Subscribe The email address or link that can be used to subscribe to
	   the mailing list.  If this is an email address, a
	   <code>mailto:</code> link will automatically be created
	   when the documentation is created.*/
	Subscribe *string `xml:"subscribe,omitempty"`

	/* Unsubscribe The email address or link that can be used to unsubscribe to
	   the mailing list.  If this is an email address, a
	   <code>mailto:</code> link will automatically be created
	   when the documentation is created.*/
	Unsubscribe *string `xml:"unsubscribe,omitempty"`

	/* Post The email address or link that can be used to post to
	   the mailing list.  If this is an email address, a
	   <code>mailto:</code> link will automatically be created
	   when the documentation is created.*/
	Post *string `xml:"post,omitempty"`

	/* Archive The link to a URL where you can browse the mailing list archive.*/
	Archive *string `xml:"archive,omitempty"`

	/* OtherArchives The link to alternate URLs where you can browse the list archive.*/
	OtherArchives *struct {
		Comment      string    `xml:",comment"`
		OtherArchive *[]string `xml:"otherArchive,omitempty"`
	} `xml:"otherArchives,omitempty"`

	Comment string `xml:",comment"`
}

// Contributor Description of a person who has contributed to the project, but who does not have
//        commit privileges. Usually, these contributions come in the form of patches submitted.
type Contributor struct {

	/* Name The full name of the contributor.*/
	Name *string `xml:"name,omitempty"`

	/* Email The email address of the contributor.*/
	Email *string `xml:"email,omitempty"`

	/* Url The URL for the homepage of the contributor.*/
	URL *string `xml:"url,omitempty"`

	/* Organization The organization to which the contributor belongs.*/
	Organization *string `xml:"organization,omitempty"`

	/* OrganizationUrl The URL of the organization.*/
	OrganizationURL *string `xml:"organizationUrl,omitempty"`

	/* Roles The roles the contributor plays in the project. Each role is described by a
	   <code>role</code> element, the body of which is a role name. This can also be used to
	   describe the contribution.*/
	Roles *struct {
		Comment string    `xml:",comment"`
		Role    *[]string `xml:"role,omitempty"`
	} `xml:"roles,omitempty"`

	/* Timezone The timezone the contributor is in. Typically, this is a number in the range
	   <a href="http://en.wikipedia.org/wiki/UTC%E2%88%9212:00">-12</a> to <a href="http://en.wikipedia.org/wiki/UTC%2B14:00">+14</a>
	   or a valid time zone id like "America/Montreal" (UTC-05:00) or "Europe/Paris" (UTC+01:00).*/
	Timezone *string `xml:"timezone,omitempty"`

	/* Properties Properties about the contributor, such as an instant messenger handle.*/
	Properties *XMLAnyElement `xml:"properties,omitempty"`

	Comment string `xml:",comment"`
}

// Organization Specifies the organization that produces this project.
type Organization struct {

	/* Name The full name of the organization.*/
	Name *string `xml:"name,omitempty"`

	/* Url The URL to the organization's home page.*/
	URL *string `xml:"url,omitempty"`

	Comment string `xml:",comment"`
}

// DistributionManagement This elements describes all that pertains to distribution for a project. It is
//        primarily used for deployment of artifacts and the site produced by the build.
type DistributionManagement struct {

	/* Repository Information needed to deploy the artifacts generated by the project to a
	   remote repository.*/
	Repository *DeploymentRepository `xml:"repository,omitempty"`

	/* SnapshotRepository Where to deploy snapshots of artifacts to. If not given, it defaults to the
	   <code>repository</code> element.*/
	SnapshotRepository *DeploymentRepository `xml:"snapshotRepository,omitempty"`

	/* Site Information needed for deploying the web site of the project.*/
	Site *Site `xml:"site,omitempty"`

	/* DownloadUrl The URL of the project's download page. If not given users will be
	   referred to the homepage given by <code>url</code>.
	   This is given to assist in locating artifacts that are not in the repository due to
	   licensing restrictions.*/
	DownloadURL *string `xml:"downloadUrl,omitempty"`

	/* Relocation Relocation information of the artifact if it has been moved to a new group ID
	   and/or artifact ID.*/
	Relocation *Relocation `xml:"relocation,omitempty"`

	/* Status Gives the status of this artifact in the remote repository.
	   This must not be set in your local project, as it is updated by
	   tools placing it in the reposiory. Valid values are: <code>none</code> (default),
	   <code>converted</code> (repository manager converted this from an Maven 1 POM),
	   <code>partner</code>
	   (directly synced from a partner Maven 2 repository), <code>deployed</code> (was deployed from a Maven 2
	   instance), <code>verified</code> (has been hand verified as correct and final).*/
	Status *string `xml:"status,omitempty"`

	Comment string `xml:",comment"`
}

// DeploymentRepository Repository contains the information needed for deploying to the remote
//        repository.
type DeploymentRepository struct {

	/* UniqueVersion Whether to assign snapshots a unique version comprised of the timestamp and
	   build number, or to use the same version each time*/
	UniqueVersion *bool `xml:"uniqueVersion,omitempty"`

	/* Releases How to handle downloading of releases from this repository.*/
	Releases *RepositoryPolicy `xml:"releases,omitempty"`

	/* Snapshots How to handle downloading of snapshots from this repository.*/
	Snapshots *RepositoryPolicy `xml:"snapshots,omitempty"`

	/* Id A unique identifier for a repository. This is used to match the repository
	   to configuration in the <code>settings.xml</code> file, for example. Furthermore, the identifier is
	   used during POM inheritance and profile injection to detect repositories that should be merged.*/
	ID *string `xml:"id,omitempty"`

	/* Name Human readable name of the repository.*/
	Name *string `xml:"name,omitempty"`

	/* Url The url of the repository, in the form <code>protocol://hostname/path</code>.*/
	URL *string `xml:"url,omitempty"`

	/* Layout The type of layout this repository uses for locating and storing artifacts -
	   can be <code>legacy</code> or <code>default</code>.*/
	Layout *string `xml:"layout,omitempty"`

	Comment string `xml:",comment"`
}

// RepositoryPolicy Download policy.
type RepositoryPolicy struct {

	/* Enabled Whether to use this repository for downloading this type of artifact. Note: While the type
	   of this field is <code>String</code> for technical reasons, the semantic type is actually
	   <code>Boolean</code>. Default value is <code>true</code>.*/
	Enabled *string `xml:"enabled,omitempty"`

	/* UpdatePolicy The frequency for downloading updates - can be
	   <code>always,</code>
	   <code>daily</code>
	   (default),
	   <code>interval:XXX</code>
	   (in minutes) or
	   <code>never</code>
	   (only if it doesn't exist locally).*/
	UpdatePolicy *string `xml:"updatePolicy,omitempty"`

	/* ChecksumPolicy What to do when verification of an artifact checksum fails. Valid values are
	   <code>ignore</code>
	   ,
	   <code>fail</code>
	   or
	   <code>warn</code>
	   (the default).*/
	ChecksumPolicy *string `xml:"checksumPolicy,omitempty"`

	Comment string `xml:",comment"`
}

// Relocation Describes where an artifact has moved to. If any of the values are omitted, it is
//        assumed to be the same as it was before.
type Relocation struct {

	/* GroupId The group ID the artifact has moved to.*/
	GroupID *string `xml:"groupId,omitempty"`

	/* ArtifactId The new artifact ID of the artifact.*/
	ArtifactID *string `xml:"artifactId,omitempty"`

	/* Version The new version of the artifact.*/
	Version *string `xml:"version,omitempty"`

	/* Message An additional message to show the user about the move, such as the reason.*/
	Message *string `xml:"message,omitempty"`

	Comment string `xml:",comment"`
}

// Site Contains the information needed for deploying websites.
type Site struct {

	/* Id A unique identifier for a deployment location. This is used to match the
	   site to configuration in the <code>settings.xml</code> file, for example.*/
	ID *string `xml:"id,omitempty"`

	/* Name Human readable name of the deployment location.*/
	Name *string `xml:"name,omitempty"`

	/* Url The url of the location where website is deployed, in the form <code>protocol://hostname/path</code>.
	   <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
	   site's <code>child.site.url.inherit.append.path="false"</code>*/
	URL *string `xml:"url,omitempty"`

	Comment string `xml:",comment"`
}

// Reporting Section for management of reports and their configuration.
type Reporting struct {

	/* ExcludeDefaults If true, then the default reports are not included in the site generation.
	   This includes the reports in the "Project Info" menu. Note: While the type
	   of this field is <code>String</code> for technical reasons, the semantic type is actually
	   <code>Boolean</code>. Default value is <code>false</code>.*/
	ExcludeDefaults *string `xml:"excludeDefaults,omitempty"`

	/* OutputDirectory Where to store all of the generated reports. The default is
	   <code>${project.build.directory}/site</code>.*/
	OutputDirectory *string `xml:"outputDirectory,omitempty"`

	/* Plugins The reporting plugins to use and their configuration.*/
	Plugins *struct {
		Comment      string          `xml:",comment"`
		ReportPlugin *[]ReportPlugin `xml:"reportPlugin,omitempty"`
	} `xml:"plugins,omitempty"`

	Comment string `xml:",comment"`
}

// ReportPlugin The <code>&lt;plugin&gt;</code> element contains informations required for a report plugin.
type ReportPlugin struct {

	/* GroupId The group ID of the reporting plugin in the repository.*/
	GroupID *string `xml:"groupId,omitempty"`

	/* ArtifactId The artifact ID of the reporting plugin in the repository.*/
	ArtifactID *string `xml:"artifactId,omitempty"`

	/* Version The version of the reporting plugin to be used.*/
	Version *string `xml:"version,omitempty"`

	/* ReportSets Multiple specifications of a set of reports, each having (possibly) different
	   configuration. This is the reporting parallel to an <code>execution</code> in the build.*/
	ReportSets *struct {
		Comment   string       `xml:",comment"`
		ReportSet *[]ReportSet `xml:"reportSet,omitempty"`
	} `xml:"reportSets,omitempty"`

	/* Inherited Whether any configuration should be propagated to child POMs. Note: While the type
	   of this field is <code>String</code> for technical reasons, the semantic type is actually
	   <code>Boolean</code>. Default value is <code>true</code>.*/
	Inherited *string `xml:"inherited,omitempty"`

	/* Configuration <p>The configuration as DOM object.</p>
	   <p>By default, every element content is trimmed, but starting with Maven 3.1.0, you can add
	   <code>xml:space="preserve"</code> to elements you want to preserve whitespace.</p>
	   <p>You can control how child POMs inherit configuration from parent POMs by adding <code>combine.children</code>
	   or <code>combine.self</code> attributes to the children of the configuration element:</p>
	   <ul>
	   <li><code>combine.children</code>: available values are <code>merge</code> (default) and <code>append</code>,</li>
	   <li><code>combine.self</code>: available values are <code>merge</code> (default) and <code>override</code>.</li>
	   </ul>
	   <p>See <a href="https://maven.apache.org/pom.html#Plugins">POM Reference documentation</a> and
	   <a href="https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html">Xpp3DomUtils</a>
	   for more information.</p>*/
	Configuration *XMLAnyElement `xml:"configuration,omitempty"`

	Comment string `xml:",comment"`
}

// ReportSet Represents a set of reports and configuration to be used to generate them.
type ReportSet struct {

	/* Id The unique id for this report set, to be used during POM inheritance and profile injection
	   for merging of report sets.*/
	ID *string `xml:"id,omitempty"`

	/* Reports The list of reports from this plugin which should be generated from this set.*/
	Reports *struct {
		Comment string    `xml:",comment"`
		Report  *[]string `xml:"report,omitempty"`
	} `xml:"reports,omitempty"`

	/* Inherited Whether any configuration should be propagated to child POMs. Note: While the type
	   of this field is <code>String</code> for technical reasons, the semantic type is actually
	   <code>Boolean</code>. Default value is <code>true</code>.*/
	Inherited *string `xml:"inherited,omitempty"`

	/* Configuration <p>The configuration as DOM object.</p>
	   <p>By default, every element content is trimmed, but starting with Maven 3.1.0, you can add
	   <code>xml:space="preserve"</code> to elements you want to preserve whitespace.</p>
	   <p>You can control how child POMs inherit configuration from parent POMs by adding <code>combine.children</code>
	   or <code>combine.self</code> attributes to the children of the configuration element:</p>
	   <ul>
	   <li><code>combine.children</code>: available values are <code>merge</code> (default) and <code>append</code>,</li>
	   <li><code>combine.self</code>: available values are <code>merge</code> (default) and <code>override</code>.</li>
	   </ul>
	   <p>See <a href="https://maven.apache.org/pom.html#Plugins">POM Reference documentation</a> and
	   <a href="https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html">Xpp3DomUtils</a>
	   for more information.</p>*/
	Configuration *XMLAnyElement `xml:"configuration,omitempty"`

	Comment string `xml:",comment"`
}

// Profile Modifications to the build process which is activated based on environmental
//        parameters or command line arguments.
type Profile struct {

	/* Id The identifier of this build profile. This is used for command line
	   activation, and identifies profiles to be merged.*/
	ID *string `xml:"id,omitempty"`

	/* Activation The conditional logic which will automatically trigger the inclusion of this
	   profile.*/
	Activation *Activation `xml:"activation,omitempty"`

	/* Build Information required to build the project.*/
	Build *BuildBase `xml:"build,omitempty"`

	/* Modules The modules (sometimes called subprojects) to build as a part of this
	   project. Each module listed is a relative path to the directory containing the module.
	   To be consistent with the way default urls are calculated from parent, it is recommended
	   to have module names match artifact ids.*/
	Modules *struct {
		Comment string    `xml:",comment"`
		Module  *[]string `xml:"module,omitempty"`
	} `xml:"modules,omitempty"`

	/* DistributionManagement Distribution information for a project that enables deployment of the site
	   and artifacts to remote web servers and repositories respectively.*/
	DistributionManagement *DistributionManagement `xml:"distributionManagement,omitempty"`

	/* Properties Properties that can be used throughout the POM as a substitution, and
	   are used as filters in resources if enabled.
	   The format is <code>&lt;name&gt;value&lt;/name&gt;</code>.*/
	Properties *XMLAnyElement `xml:"properties,omitempty"`

	/* DependencyManagement Default dependency information for projects that inherit from this one. The
	   dependencies in this section are not immediately resolved. Instead, when a POM derived
	   from this one declares a dependency described by a matching groupId and artifactId, the
	   version and other values from this section are used for that dependency if they were not
	   already specified.*/
	DependencyManagement *DependencyManagement `xml:"dependencyManagement,omitempty"`

	/* Dependencies This element describes all of the dependencies associated with a
	   project.
	   These dependencies are used to construct a classpath for your
	   project during the build process. They are automatically downloaded from the
	   repositories defined in this project.
	   See <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the
	   dependency mechanism</a> for more information.*/
	Dependencies *struct {
		Comment    string        `xml:",comment"`
		Dependency *[]Dependency `xml:"dependency,omitempty"`
	} `xml:"dependencies,omitempty"`

	/* Repositories The lists of the remote repositories for discovering dependencies and
	   extensions.*/
	Repositories *struct {
		Comment    string        `xml:",comment"`
		Repository *[]Repository `xml:"repository,omitempty"`
	} `xml:"repositories,omitempty"`

	/* PluginRepositories The lists of the remote repositories for discovering plugins for builds and
	   reports.*/
	PluginRepositories *struct {
		Comment    string        `xml:",comment"`
		Repository *[]Repository `xml:"repository,omitempty"`
	} `xml:"pluginRepositories,omitempty"`

	/* Reports <b>Deprecated</b>. Now ignored by Maven.*/
	Reports *XMLAnyElement `xml:"reports,omitempty"`

	/* Reporting This element includes the specification of report plugins to use
	   to generate the reports on the Maven-generated site.
	   These reports will be run when a user executes <code>mvn site</code>.
	   All of the reports will be included in the navigation bar for browsing.*/
	Reporting *Reporting `xml:"reporting,omitempty"`

	Comment string `xml:",comment"`
}

// Activation The conditions within the build runtime environment which will trigger the
//        automatic inclusion of the build profile. Multiple conditions can be defined, which must
//        be all satisfied to activate the profile.
type Activation struct {

	/* ActiveByDefault If set to true, this profile will be active unless another profile in this
	   pom is activated using the command line -P option or by one of that profile's
	   activators.*/
	ActiveByDefault *bool `xml:"activeByDefault,omitempty"`

	/* Jdk Specifies that this profile will be activated when a matching JDK is detected.
	   For example, <code>1.4</code> only activates on JDKs versioned 1.4,
	   while <code>!1.4</code> matches any JDK that is not version 1.4. Ranges are supported too:
	   <code>[1.5,)</code> activates when the JDK is 1.5 minimum.*/
	Jdk *string `xml:"jdk,omitempty"`

	/* Os Specifies that this profile will be activated when matching operating system
	   attributes are detected.*/
	Os *ActivationOS `xml:"os,omitempty"`

	/* Property Specifies that this profile will be activated when this system property is
	   specified.*/
	Property *ActivationProperty `xml:"property,omitempty"`

	/* File Specifies that this profile will be activated based on existence of a file.*/
	File *ActivationFile `xml:"file,omitempty"`

	Comment string `xml:",comment"`
}

// ActivationProperty This is the property specification used to activate a profile. If the value field
//        is empty, then the existence of the named property will activate the profile, otherwise it
//        does a case-sensitive match against the property value as well.
type ActivationProperty struct {

	/* Name The name of the property to be used to activate a profile.*/
	Name *string `xml:"name,omitempty"`

	/* Value The value of the property required to activate a profile.*/
	Value *string `xml:"value,omitempty"`

	Comment string `xml:",comment"`
}

// ActivationFile This is the file specification used to activate the profile. The <code>missing</code> value
//        is the location of a file that needs to exist, and if it doesn't, the profile will be
//        activated. On the other hand, <code>exists</code> will test for the existence of the file and if it is
//        there, the profile will be activated.<br>
//        Variable interpolation for these file specifications is limited to <code>${basedir}</code>,
//        System properties and request properties.
type ActivationFile struct {

	/* Missing The name of the file that must be missing to activate the
	   profile.*/
	Missing *string `xml:"missing,omitempty"`

	/* Exists The name of the file that must exist to activate the profile.*/
	Exists *string `xml:"exists,omitempty"`

	Comment string `xml:",comment"`
}

// ActivationOS This is an activator which will detect an operating system's attributes in order
//        to activate its profile.
type ActivationOS struct {

	/* Name The name of the operating system to be used to activate the profile. This must be an exact match
	   of the <code>${os.name}</code> Java property, such as <code>Windows XP</code>.*/
	Name *string `xml:"name,omitempty"`

	/* Family The general family of the OS to be used to activate the profile, such as
	   <code>windows</code> or <code>unix</code>.*/
	Family *string `xml:"family,omitempty"`

	/* Arch The architecture of the operating system to be used to activate the
	   profile.*/
	Arch *string `xml:"arch,omitempty"`

	/* Version The version of the operating system to be used to activate the
	   profile.*/
	Version *string `xml:"version,omitempty"`

	Comment string `xml:",comment"`
}

// Repository A repository contains the information needed for establishing connections with
//        remote repository.
type Repository struct {

	/* Releases How to handle downloading of releases from this repository.*/
	Releases *RepositoryPolicy `xml:"releases,omitempty"`

	/* Snapshots How to handle downloading of snapshots from this repository.*/
	Snapshots *RepositoryPolicy `xml:"snapshots,omitempty"`

	/* Id A unique identifier for a repository. This is used to match the repository
	   to configuration in the <code>settings.xml</code> file, for example. Furthermore, the identifier is
	   used during POM inheritance and profile injection to detect repositories that should be merged.*/
	ID *string `xml:"id,omitempty"`

	/* Name Human readable name of the repository.*/
	Name *string `xml:"name,omitempty"`

	/* Url The url of the repository, in the form <code>protocol://hostname/path</code>.*/
	URL *string `xml:"url,omitempty"`

	/* Layout The type of layout this repository uses for locating and storing artifacts -
	   can be <code>legacy</code> or <code>default</code>.*/
	Layout *string `xml:"layout,omitempty"`

	Comment string `xml:",comment"`
}

// BuildBase Generic informations for a build.
type BuildBase struct {

	/* DefaultGoal The default goal (or phase in Maven 2) to execute when none is specified for
	   the project. Note that in case of a multi-module build, only the default goal of the top-level
	   project is relevant, i.e. the default goals of child modules are ignored. Since Maven 3,
	   multiple goals/phases can be separated by whitespace.*/
	DefaultGoal *string `xml:"defaultGoal,omitempty"`

	/* Resources This element describes all of the classpath resources such as properties
	   files associated with a project. These resources are often included in the final
	   package.
	   The default value is <code>src/main/resources</code>.*/
	Resources *struct {
		Comment  string      `xml:",comment"`
		Resource *[]Resource `xml:"resource,omitempty"`
	} `xml:"resources,omitempty"`

	/* TestResources This element describes all of the classpath resources such as properties
	   files associated with a project's unit tests.
	   The default value is <code>src/test/resources</code>.*/
	TestResources *struct {
		Comment  string      `xml:",comment"`
		Resource *[]Resource `xml:"resource,omitempty"`
	} `xml:"testResources,omitempty"`

	/* Directory The directory where all files generated by the build are placed.
	   The default value is <code>target</code>.*/
	Directory *string `xml:"directory,omitempty"`

	/* FinalName The filename (excluding the extension, and with no path information) that
	   the produced artifact will be called.
	   The default value is <code>${artifactId}-${version}</code>.*/
	FinalName *string `xml:"finalName,omitempty"`

	/* Filters The list of filter properties files that are used when filtering is enabled.*/
	Filters *struct {
		Comment string    `xml:",comment"`
		Filter  *[]string `xml:"filter,omitempty"`
	} `xml:"filters,omitempty"`

	/* PluginManagement Default plugin information to be made available for reference by projects
	   derived from this one. This plugin configuration will not be resolved or bound to the
	   lifecycle unless referenced. Any local configuration for a given plugin will override
	   the plugin's entire definition here.*/
	PluginManagement *PluginManagement `xml:"pluginManagement,omitempty"`

	/* Plugins The list of plugins to use.*/
	Plugins *struct {
		Comment string    `xml:",comment"`
		Plugin  *[]Plugin `xml:"plugin,omitempty"`
	} `xml:"plugins,omitempty"`

	Comment string `xml:",comment"`
}

// Plugin The <code>&lt;plugin&gt;</code> element contains informations required for a plugin.
type Plugin struct {

	/* GroupId The group ID of the plugin in the repository.*/
	GroupID *string `xml:"groupId,omitempty"`

	/* ArtifactId The artifact ID of the plugin in the repository.*/
	ArtifactID *string `xml:"artifactId,omitempty"`

	/* Version The version (or valid range of versions) of the plugin to be used.*/
	Version *string `xml:"version,omitempty"`

	/* Extensions Whether to load Maven extensions (such as packaging and type handlers) from
	   this plugin. For performance reasons, this should only be enabled when necessary. Note: While the type
	   of this field is <code>String</code> for technical reasons, the semantic type is actually
	   <code>Boolean</code>. Default value is <code>false</code>.*/
	Extensions *string `xml:"extensions,omitempty"`

	/* Executions Multiple specifications of a set of goals to execute during the build
	   lifecycle, each having (possibly) a different configuration.*/
	Executions *struct {
		Comment         string             `xml:",comment"`
		PluginExecution *[]PluginExecution `xml:"pluginExecution,omitempty"`
	} `xml:"executions,omitempty"`

	/* Dependencies Additional dependencies that this project needs to introduce to the plugin's
	   classloader.*/
	Dependencies *struct {
		Comment    string        `xml:",comment"`
		Dependency *[]Dependency `xml:"dependency,omitempty"`
	} `xml:"dependencies,omitempty"`

	/* Goals <b>Deprecated</b>. Unused by Maven.*/
	Goals *XMLAnyElement `xml:"goals,omitempty"`

	/* Inherited Whether any configuration should be propagated to child POMs. Note: While the type
	   of this field is <code>String</code> for technical reasons, the semantic type is actually
	   <code>Boolean</code>. Default value is <code>true</code>.*/
	Inherited *string `xml:"inherited,omitempty"`

	/* Configuration <p>The configuration as DOM object.</p>
	   <p>By default, every element content is trimmed, but starting with Maven 3.1.0, you can add
	   <code>xml:space="preserve"</code> to elements you want to preserve whitespace.</p>
	   <p>You can control how child POMs inherit configuration from parent POMs by adding <code>combine.children</code>
	   or <code>combine.self</code> attributes to the children of the configuration element:</p>
	   <ul>
	   <li><code>combine.children</code>: available values are <code>merge</code> (default) and <code>append</code>,</li>
	   <li><code>combine.self</code>: available values are <code>merge</code> (default) and <code>override</code>.</li>
	   </ul>
	   <p>See <a href="https://maven.apache.org/pom.html#Plugins">POM Reference documentation</a> and
	   <a href="https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html">Xpp3DomUtils</a>
	   for more information.</p>*/
	Configuration *XMLAnyElement `xml:"configuration,omitempty"`

	Comment string `xml:",comment"`
}

// PluginExecution The <code>&lt;execution&gt;</code> element contains informations required for the
//        execution of a plugin.
type PluginExecution struct {

	/* Id The identifier of this execution for labelling the goals during the build,
	   and for matching executions to merge during inheritance and profile injection.*/
	ID *string `xml:"id,omitempty"`

	/* Phase The build lifecycle phase to bind the goals in this execution to. If omitted,
	   the goals will be bound to the default phase specified by the plugin.*/
	Phase *string `xml:"phase,omitempty"`

	/* Goals The goals to execute with the given configuration.*/
	Goals *struct {
		Comment string    `xml:",comment"`
		Goal    *[]string `xml:"goal,omitempty"`
	} `xml:"goals,omitempty"`

	/* Inherited Whether any configuration should be propagated to child POMs. Note: While the type
	   of this field is <code>String</code> for technical reasons, the semantic type is actually
	   <code>Boolean</code>. Default value is <code>true</code>.*/
	Inherited *string `xml:"inherited,omitempty"`

	/* Configuration <p>The configuration as DOM object.</p>
	   <p>By default, every element content is trimmed, but starting with Maven 3.1.0, you can add
	   <code>xml:space="preserve"</code> to elements you want to preserve whitespace.</p>
	   <p>You can control how child POMs inherit configuration from parent POMs by adding <code>combine.children</code>
	   or <code>combine.self</code> attributes to the children of the configuration element:</p>
	   <ul>
	   <li><code>combine.children</code>: available values are <code>merge</code> (default) and <code>append</code>,</li>
	   <li><code>combine.self</code>: available values are <code>merge</code> (default) and <code>override</code>.</li>
	   </ul>
	   <p>See <a href="https://maven.apache.org/pom.html#Plugins">POM Reference documentation</a> and
	   <a href="https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html">Xpp3DomUtils</a>
	   for more information.</p>*/
	Configuration *XMLAnyElement `xml:"configuration,omitempty"`

	Comment string `xml:",comment"`
}

// Resource This element describes all of the classpath resources associated with a project
//        or unit tests.
type Resource struct {

	/* TargetPath Describe the resource target path. The path is relative to the target/classes
	   directory (i.e. <code>${project.build.outputDirectory}</code>).
	   For example, if you want that resource to appear in a specific package
	   (<code>org.apache.maven.messages</code>), you must specify this
	   element with this value: <code>org/apache/maven/messages</code>.
	   This is not required if you simply put the resources in that directory
	   structure at the source, however.*/
	TargetPath *string `xml:"targetPath,omitempty"`

	/* Filtering Whether resources are filtered to replace tokens with parameterised values or not.
	   The values are taken from the <code>properties</code> element and from the
	   properties in the files listed in the <code>filters</code> element. Note: While the type
	   of this field is <code>String</code> for technical reasons, the semantic type is actually
	   <code>Boolean</code>. Default value is <code>false</code>.*/
	Filtering *string `xml:"filtering,omitempty"`

	/* Directory Describe the directory where the resources are stored. The path is relative
	   to the POM.*/
	Directory *string `xml:"directory,omitempty"`

	/* Includes A list of patterns to include, e.g. <code>**&#47;*.xml</code>.*/
	Includes *struct {
		Comment string    `xml:",comment"`
		Include *[]string `xml:"include,omitempty"`
	} `xml:"includes,omitempty"`

	/* Excludes A list of patterns to exclude, e.g. <code>**&#47;*.xml</code>*/
	Excludes *struct {
		Comment string    `xml:",comment"`
		Exclude *[]string `xml:"exclude,omitempty"`
	} `xml:"excludes,omitempty"`

	Comment string `xml:",comment"`
}

// PluginManagement Section for management of default plugin information for use in a group of POMs.
type PluginManagement struct {

	/* Plugins The list of plugins to use.*/
	Plugins *struct {
		Comment string    `xml:",comment"`
		Plugin  *[]Plugin `xml:"plugin,omitempty"`
	} `xml:"plugins,omitempty"`

	Comment string `xml:",comment"`
}

// Prerequisites Describes the prerequisites a project can have.
type Prerequisites struct {

	/* Maven For a plugin project (packaging is <code>maven-plugin</code>), the minimum version of
	   Maven required to use the resulting plugin.<br>
	   In Maven 2, this was also specifying the minimum version of Maven required to build a
	   project, but this usage is <b>deprecated</b> in Maven 3 and not checked any more: use
	   the <a href="https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html">Maven Enforcer Plugin's
	   <code>requireMavenVersion</code> rule</a> instead.*/
	Maven *string `xml:"maven,omitempty"`

	Comment string `xml:",comment"`
}

// Build The <code>&lt;build&gt;</code> element contains informations required to build the project.
//        Default values are defined in Super POM.
type Build struct {

	/* SourceDirectory This element specifies a directory containing the source of the project. The
	   generated build system will compile the sources from this directory when the project is
	   built. The path given is relative to the project descriptor.
	   The default value is <code>src/main/java</code>.*/
	SourceDirectory *string `xml:"sourceDirectory,omitempty"`

	/* ScriptSourceDirectory This element specifies a directory containing the script sources of the
	   project. This directory is meant to be different from the sourceDirectory, in that its
	   contents will be copied to the output directory in most cases (since scripts are
	   interpreted rather than compiled).
	   The default value is <code>src/main/scripts</code>.*/
	ScriptSourceDirectory *string `xml:"scriptSourceDirectory,omitempty"`

	/* TestSourceDirectory This element specifies a directory containing the unit test source of the
	   project. The generated build system will compile these directories when the project is
	   being tested. The path given is relative to the project descriptor.
	   The default value is <code>src/test/java</code>.*/
	TestSourceDirectory *string `xml:"testSourceDirectory,omitempty"`

	/* OutputDirectory The directory where compiled application classes are placed.
	   The default value is <code>target/classes</code>.*/
	OutputDirectory *string `xml:"outputDirectory,omitempty"`

	/* TestOutputDirectory The directory where compiled test classes are placed.
	   The default value is <code>target/test-classes</code>.*/
	TestOutputDirectory *string `xml:"testOutputDirectory,omitempty"`

	/* Extensions A set of build extensions to use from this project.*/
	Extensions *struct {
		Comment   string       `xml:",comment"`
		Extension *[]Extension `xml:"extension,omitempty"`
	} `xml:"extensions,omitempty"`

	/* DefaultGoal The default goal (or phase in Maven 2) to execute when none is specified for
	   the project. Note that in case of a multi-module build, only the default goal of the top-level
	   project is relevant, i.e. the default goals of child modules are ignored. Since Maven 3,
	   multiple goals/phases can be separated by whitespace.*/
	DefaultGoal *string `xml:"defaultGoal,omitempty"`

	/* Resources This element describes all of the classpath resources such as properties
	   files associated with a project. These resources are often included in the final
	   package.
	   The default value is <code>src/main/resources</code>.*/
	Resources *struct {
		Comment  string      `xml:",comment"`
		Resource *[]Resource `xml:"resource,omitempty"`
	} `xml:"resources,omitempty"`

	/* TestResources This element describes all of the classpath resources such as properties
	   files associated with a project's unit tests.
	   The default value is <code>src/test/resources</code>.*/
	TestResources *struct {
		Comment  string      `xml:",comment"`
		Resource *[]Resource `xml:"resource,omitempty"`
	} `xml:"testResources,omitempty"`

	/* Directory The directory where all files generated by the build are placed.
	   The default value is <code>target</code>.*/
	Directory *string `xml:"directory,omitempty"`

	/* FinalName The filename (excluding the extension, and with no path information) that
	   the produced artifact will be called.
	   The default value is <code>${artifactId}-${version}</code>.*/
	FinalName *string `xml:"finalName,omitempty"`

	/* Filters The list of filter properties files that are used when filtering is enabled.*/
	Filters *struct {
		Comment string    `xml:",comment"`
		Filter  *[]string `xml:"filter,omitempty"`
	} `xml:"filters,omitempty"`

	/* PluginManagement Default plugin information to be made available for reference by projects
	   derived from this one. This plugin configuration will not be resolved or bound to the
	   lifecycle unless referenced. Any local configuration for a given plugin will override
	   the plugin's entire definition here.*/
	PluginManagement *PluginManagement `xml:"pluginManagement,omitempty"`

	/* Plugins The list of plugins to use.*/
	Plugins *struct {
		Comment string    `xml:",comment"`
		Plugin  *[]Plugin `xml:"plugin,omitempty"`
	} `xml:"plugins,omitempty"`

	Comment string `xml:",comment"`
}

// Extension Describes a build extension to utilise.
type Extension struct {

	/* GroupId The group ID of the extension's artifact.*/
	GroupID *string `xml:"groupId,omitempty"`

	/* ArtifactId The artifact ID of the extension.*/
	ArtifactID *string `xml:"artifactId,omitempty"`

	/* Version The version of the extension.*/
	Version *string `xml:"version,omitempty"`

	Comment string `xml:",comment"`
}
